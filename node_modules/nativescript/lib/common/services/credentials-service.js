"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const crypto = require("crypto");
const os_1 = require("os");
class CredentialsService {
    constructor($childProcess, $hostInfo, $logger) {
        this.$childProcess = $childProcess;
        this.$hostInfo = $hostInfo;
        this.$logger = $logger;
        this.pathToWindowsCredentialsManager = path.join(__dirname, "..", "vendor", os_1.platform(), "CredentialsManager.exe");
    }
    setCredentials(key, credentials) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.$hostInfo.isWindows) {
                yield this.$childProcess.spawnFromEvent(this.pathToWindowsCredentialsManager, ["set", key, credentials.username, this.encrypt(credentials.password)], "close");
                return credentials;
            }
            else {
                throw new Error(`Storing credentials is not supported on ${os_1.platform()} yet.`);
            }
        });
    }
    getCredentials(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.$hostInfo.isWindows) {
                const credentialsSpawnResult = yield this.$childProcess.spawnFromEvent(this.pathToWindowsCredentialsManager, ["get", key], "close", {}, { throwError: false });
                const credentialsSplit = credentialsSpawnResult && credentialsSpawnResult.stdout && credentialsSpawnResult.stdout.split(os_1.EOL);
                return {
                    username: credentialsSplit && credentialsSplit[0],
                    password: credentialsSplit && this.decrypt(credentialsSplit[1])
                };
            }
            else {
                this.$logger.trace(`Storing credentials is not supported on ${os_1.platform()} yet.`);
            }
        });
    }
    clearCredentials(key) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.$hostInfo.isWindows) {
                yield this.$childProcess.spawnFromEvent(this.pathToWindowsCredentialsManager, ["clear", key], "close");
            }
            else {
                this.$logger.trace(`Storing credentials is not supported on ${os_1.platform()} yet.`);
            }
        });
    }
    encrypt(text) {
        const cipher = crypto.createCipher(CredentialsService.ENCRYPTION_ALGORITHM, CredentialsService.ENCRYPTION_KEY);
        let crypted = cipher.update(text, 'utf8', 'hex');
        crypted += cipher.final('hex');
        return crypted;
    }
    decrypt(text) {
        const decipher = crypto.createDecipher(CredentialsService.ENCRYPTION_ALGORITHM, CredentialsService.ENCRYPTION_KEY);
        let dec = decipher.update(text, 'hex', 'utf8');
        dec += decipher.final('utf8');
        return dec;
    }
}
CredentialsService.ENCRYPTION_ALGORITHM = "aes-256-ctr";
CredentialsService.ENCRYPTION_KEY = "6Gsz97KBp293Q0r0ei4pix98V4PIhm2D";
exports.CredentialsService = CredentialsService;
$injector.register("credentialsService", CredentialsService);
