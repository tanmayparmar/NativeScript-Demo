"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
let qrcode = require("qrcode-generator");
class QrCodeGenerator {
    constructor($staticConfig) {
        this.$staticConfig = $staticConfig;
    }
    generateQrCode(data) {
        return __awaiter(this, void 0, void 0, function* () {
            let errorCorrectionLevel = "L";
            let errorCorrectionOffset = _.indexOf(QrCodeGenerator.ERROR_CORRECTION_LEVEL, errorCorrectionLevel);
            let maxReedSolomonBlockIndex = QrCodeGenerator.MAX_BLOCK_VERSION / 4 - errorCorrectionOffset;
            for (let i = 1; i <= maxReedSolomonBlockIndex; ++i) {
                let qr = qrcode(i, errorCorrectionLevel);
                try {
                    qr.addData(data);
                    qr.make();
                }
                catch (ex) {
                    let expected = "code length overflow.";
                    if (ex.message && ex.message.substr(0, expected.length) === expected) {
                        continue;
                    }
                    else {
                        throw ex;
                    }
                }
                return qr;
            }
            return null;
        });
    }
    generateDataUri(data) {
        return __awaiter(this, void 0, void 0, function* () {
            let qr = yield this.generateQrCode(data);
            let dataUri = null;
            if (qr) {
                let cells = qr.getModuleCount();
                let size = this.$staticConfig.QR_SIZE;
                let cellSize = Math.ceil(size / (cells + 2 * 4));
                let imgTag = qr.createImgTag(cellSize);
                dataUri = imgTag.split('src="')[1].split('"')[0];
            }
            return dataUri;
        });
    }
}
QrCodeGenerator.ERROR_CORRECTION_LEVEL = ["L", "M", "Q", "H"];
QrCodeGenerator.MAX_BLOCK_VERSION = 40;
exports.QrCodeGenerator = QrCodeGenerator;
$injector.register("qr", QrCodeGenerator);
