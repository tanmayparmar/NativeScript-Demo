"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class ProgressIndicator {
    constructor($logger) {
        this.$logger = $logger;
    }
    showProgressIndicator(promise, timeout, options) {
        return __awaiter(this, void 0, void 0, function* () {
            let surpressTrailingNewLine = options && options.surpressTrailingNewLine;
            let isResolved = false;
            const tempPromise = new Promise((resolve, reject) => {
                promise.then((res) => {
                    isResolved = true;
                    resolve(res);
                }, (err) => {
                    isResolved = true;
                    reject(err);
                });
            });
            while (!isResolved) {
                yield this.$logger.printMsgWithTimeout(".", timeout);
            }
            if (!surpressTrailingNewLine) {
                this.$logger.out();
            }
            return tempPromise;
        });
    }
}
exports.ProgressIndicator = ProgressIndicator;
$injector.register("progressIndicator", ProgressIndicator);
