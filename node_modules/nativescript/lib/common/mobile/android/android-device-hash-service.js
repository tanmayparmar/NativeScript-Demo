"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const path = require("path");
const temp = require("temp");
class AndroidDeviceHashService {
    constructor(adb, appIdentifier, $fs, $mobileHelper) {
        this.adb = adb;
        this.appIdentifier = appIdentifier;
        this.$fs = $fs;
        this.$mobileHelper = $mobileHelper;
        this._hashFileDevicePath = null;
        this._hashFileLocalPath = null;
        this._tempDir = null;
    }
    get hashFileDevicePath() {
        if (!this._hashFileDevicePath) {
            this._hashFileDevicePath = this.$mobileHelper.buildDevicePath(AndroidDeviceHashService.DEVICE_ROOT_PATH, this.appIdentifier, AndroidDeviceHashService.HASH_FILE_NAME);
        }
        return this._hashFileDevicePath;
    }
    doesShasumFileExistsOnDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            let lsResult = yield this.adb.executeShellCommand(["ls", this.hashFileDevicePath]);
            return !!(lsResult && lsResult.trim() === this.hashFileDevicePath);
        });
    }
    getShasumsFromDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            let hashFileLocalPath = yield this.downloadHashFileFromDevice();
            if (this.$fs.exists(hashFileLocalPath)) {
                return this.$fs.readJson(hashFileLocalPath);
            }
            return null;
        });
    }
    uploadHashFileToDevice(data) {
        return __awaiter(this, void 0, void 0, function* () {
            let shasums = {};
            if (_.isArray(data)) {
                yield Promise.all(data.map((localToDevicePathData) => __awaiter(this, void 0, void 0, function* () {
                    let localPath = localToDevicePathData.getLocalPath();
                    let stats = this.$fs.getFsStats(localPath);
                    if (stats.isFile()) {
                        let fileShasum = yield this.$fs.getFileShasum(localPath);
                        shasums[localPath] = fileShasum;
                    }
                })));
            }
            else {
                shasums = data;
            }
            this.$fs.writeJson(this.hashFileLocalPath, shasums);
            yield this.adb.executeCommand(["push", this.hashFileLocalPath, this.hashFileDevicePath]);
        });
    }
    updateHashes(localToDevicePaths) {
        return __awaiter(this, void 0, void 0, function* () {
            let oldShasums = yield this.getShasumsFromDevice();
            if (oldShasums) {
                yield Promise.all(_.map(localToDevicePaths, (ldp) => __awaiter(this, void 0, void 0, function* () {
                    let localPath = ldp.getLocalPath();
                    if (this.$fs.getFsStats(localPath).isFile()) {
                        oldShasums[localPath] = yield this.$fs.getFileShasum(localPath);
                    }
                })));
                yield this.uploadHashFileToDevice(oldShasums);
                return true;
            }
            return false;
        });
    }
    removeHashes(localToDevicePaths) {
        return __awaiter(this, void 0, void 0, function* () {
            let oldShasums = yield this.getShasumsFromDevice();
            if (oldShasums) {
                let fileToShasumDictionary = (_.omit(oldShasums, localToDevicePaths.map(ldp => ldp.getLocalPath())));
                yield this.uploadHashFileToDevice(fileToShasumDictionary);
                return true;
            }
            return false;
        });
    }
    get hashFileLocalPath() {
        if (!this._hashFileLocalPath) {
            this._hashFileLocalPath = path.join(this.tempDir, AndroidDeviceHashService.HASH_FILE_NAME);
        }
        return this._hashFileLocalPath;
    }
    get tempDir() {
        if (!this._tempDir) {
            temp.track();
            this._tempDir = temp.mkdirSync(`android-device-hash-service-${this.appIdentifier}`);
        }
        return this._tempDir;
    }
    downloadHashFileFromDevice() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.$fs.exists(this.hashFileLocalPath)) {
                yield this.adb.executeCommand(["pull", this.hashFileDevicePath, this.tempDir]);
            }
            return this.hashFileLocalPath;
        });
    }
}
AndroidDeviceHashService.HASH_FILE_NAME = "hashes";
AndroidDeviceHashService.DEVICE_ROOT_PATH = "/data/local/tmp";
exports.AndroidDeviceHashService = AndroidDeviceHashService;
