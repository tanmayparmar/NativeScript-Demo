"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
class CleanAppCommandBase {
    constructor($options, $projectData, $platformService) {
        this.$options = $options;
        this.$projectData = $projectData;
        this.$platformService = $platformService;
        this.$projectData.initializeProjectData();
    }
    execute(args) {
        return __awaiter(this, void 0, void 0, function* () {
            let platform = args[0].toLowerCase();
            const appFilesUpdaterOptions = { bundle: this.$options.bundle, release: this.$options.release };
            return this.$platformService.cleanDestinationApp(platform, appFilesUpdaterOptions, this.$options.platformTemplate, this.$projectData, { provision: this.$options.provision, sdk: this.$options.sdk });
        });
    }
}
exports.CleanAppCommandBase = CleanAppCommandBase;
class CleanAppIosCommand extends CleanAppCommandBase {
    constructor($options, $platformsData, $platformService, $projectData) {
        super($options, $projectData, $platformService);
        this.$options = $options;
        this.$platformsData = $platformsData;
        this.allowedParameters = [];
    }
    execute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return _super("execute").call(this, [this.$platformsData.availablePlatforms.iOS]);
        });
    }
}
exports.CleanAppIosCommand = CleanAppIosCommand;
$injector.registerCommand("clean-app|ios", CleanAppIosCommand);
class CleanAppAndroidCommand extends CleanAppCommandBase {
    constructor($options, $platformsData, $platformService, $projectData) {
        super($options, $projectData, $platformService);
        this.$options = $options;
        this.$platformsData = $platformsData;
        this.allowedParameters = [];
    }
    execute(args) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            return _super("execute").call(this, [this.$platformsData.availablePlatforms.Android]);
        });
    }
}
exports.CleanAppAndroidCommand = CleanAppAndroidCommand;
$injector.registerCommand("clean-app|android", CleanAppAndroidCommand);
