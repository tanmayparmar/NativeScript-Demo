"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const analytics_service_base_1 = require("../common/services/analytics-service-base");
class AnalyticsService extends analytics_service_base_1.AnalyticsServiceBase {
    constructor($logger, $options, $staticConfig, $prompter, $userSettingsService, $analyticsSettingsService, $progressIndicator, $osInfo) {
        super($logger, $options, $staticConfig, $prompter, $userSettingsService, $analyticsSettingsService, $progressIndicator, $osInfo);
        this.$logger = $logger;
        this.$options = $options;
    }
    checkConsentCore(trackFeatureUsage) {
        const _super = name => super[name];
        return __awaiter(this, void 0, void 0, function* () {
            yield this.restartEqatecMonitor(AnalyticsService.ANALYTICS_FEATURE_USAGE_TRACKING_API_KEY);
            yield _super("checkConsentCore").call(this, trackFeatureUsage);
            this.tryStopEqatecMonitor();
        });
    }
}
AnalyticsService.ANALYTICS_FEATURE_USAGE_TRACKING_API_KEY = "9912cff308334c6d9ad9c33f76a983e3";
exports.AnalyticsService = AnalyticsService;
$injector.register("analyticsService", AnalyticsService);
