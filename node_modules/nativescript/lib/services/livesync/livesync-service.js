"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const constants = require("../../constants");
const helpers = require("../../common/helpers");
const path = require("path");
const node_modules_dependencies_builder_1 = require("../../tools/node-modules/node-modules-dependencies-builder");
let choki = require("chokidar");
class LiveSyncService {
    constructor($errors, $platformsData, $platformService, $injector, $devicesService, $options, $logger, $dispatcher, $hooksService, $processService) {
        this.$errors = $errors;
        this.$platformsData = $platformsData;
        this.$platformService = $platformService;
        this.$injector = $injector;
        this.$devicesService = $devicesService;
        this.$options = $options;
        this.$logger = $logger;
        this.$dispatcher = $dispatcher;
        this.$hooksService = $hooksService;
        this.$processService = $processService;
        this._isInitialized = false;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    liveSync(platform, projectData, applicationReloadAction) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.$options.justlaunch) {
                this.$options.watch = false;
            }
            let liveSyncData = [];
            if (platform) {
                yield this.$devicesService.initialize({ platform: platform, deviceId: this.$options.device });
                liveSyncData.push(yield this.prepareLiveSyncData(platform, projectData));
            }
            else if (this.$options.device) {
                yield this.$devicesService.initialize({ platform: platform, deviceId: this.$options.device });
                platform = this.$devicesService.getDeviceByIdentifier(this.$options.device).deviceInfo.platform;
                liveSyncData.push(yield this.prepareLiveSyncData(platform, projectData));
            }
            else {
                yield this.$devicesService.initialize({ skipInferPlatform: true, skipDeviceDetectionInterval: true });
                for (let installedPlatform of this.$platformService.getInstalledPlatforms(projectData)) {
                    if (this.$devicesService.getDevicesForPlatform(installedPlatform).length === 0) {
                        yield this.$devicesService.startEmulator(installedPlatform);
                    }
                    liveSyncData.push(yield this.prepareLiveSyncData(installedPlatform, projectData));
                }
            }
            if (liveSyncData.length === 0) {
                this.$errors.fail("There are no platforms installed in this project. Please specify platform or install one by using `tns platform add` command!");
            }
            this._isInitialized = true;
            yield this.liveSyncCore(liveSyncData, applicationReloadAction, projectData);
        });
    }
    prepareLiveSyncData(platform, projectData) {
        return __awaiter(this, void 0, void 0, function* () {
            platform = platform || this.$devicesService.platform;
            let platformData = this.$platformsData.getPlatformData(platform.toLowerCase(), projectData);
            let liveSyncData = {
                platform: platform,
                appIdentifier: projectData.projectId,
                projectFilesPath: path.join(platformData.appDestinationDirectoryPath, constants.APP_FOLDER_NAME),
                syncWorkingDirectory: projectData.projectDir,
                excludedProjectDirsAndFiles: this.$options.release ? constants.LIVESYNC_EXCLUDED_FILE_PATTERNS : []
            };
            return liveSyncData;
        });
    }
    liveSyncCore(liveSyncData, applicationReloadAction, projectData) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.$platformService.trackProjectType(projectData);
            let watchForChangeActions = [];
            for (let dataItem of liveSyncData) {
                let service = this.$injector.resolve("platformLiveSyncService", { _liveSyncData: dataItem });
                watchForChangeActions.push((event, filePath, dispatcher) => service.partialSync(event, filePath, dispatcher, applicationReloadAction, projectData));
                yield service.fullSync(projectData, applicationReloadAction);
            }
            if (this.$options.watch && !this.$options.justlaunch) {
                yield this.$hooksService.executeBeforeHooks('watch');
                yield this.partialSync(liveSyncData[0].syncWorkingDirectory, watchForChangeActions, projectData);
            }
        });
    }
    partialSync(syncWorkingDirectory, onChangedActions, projectData) {
        let that = this;
        let dependenciesBuilder = this.$injector.resolve(node_modules_dependencies_builder_1.NodeModulesDependenciesBuilder, {});
        let productionDependencies = dependenciesBuilder.getProductionDependencies(projectData.projectDir);
        let pattern = ["app"];
        if (this.$options.syncAllFiles) {
            pattern.push("package.json");
            for (let index in productionDependencies) {
                pattern.push("node_modules/" + productionDependencies[index].name);
            }
        }
        let watcher = choki.watch(pattern, { ignoreInitial: true, cwd: syncWorkingDirectory }).on("all", (event, filePath) => {
            that.$dispatcher.dispatch(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    filePath = path.join(syncWorkingDirectory, filePath);
                    for (let i = 0; i < onChangedActions.length; i++) {
                        that.$logger.trace(`Event '${event}' triggered for path: '${filePath}'`);
                        yield onChangedActions[i](event, filePath, that.$dispatcher);
                    }
                }
                catch (err) {
                    that.$logger.info(`Unable to sync file ${filePath}. Error is:${err.message}`.red.bold);
                    that.$logger.info("Try saving it again or restart the livesync operation.");
                }
            }));
        });
        this.$processService.attachToProcessExitSignals(this, () => {
            watcher.close(pattern);
        });
        this.$dispatcher.run();
    }
}
__decorate([
    helpers.hook('livesync')
], LiveSyncService.prototype, "liveSyncCore", null);
$injector.register("usbLiveSyncService", LiveSyncService);
