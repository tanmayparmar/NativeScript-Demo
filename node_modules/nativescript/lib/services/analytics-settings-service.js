"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};
const helpers_1 = require("../common/helpers");
class AnalyticsSettingsService {
    constructor($userSettingsService, $staticConfig, $logger) {
        this.$userSettingsService = $userSettingsService;
        this.$staticConfig = $staticConfig;
        this.$logger = $logger;
    }
    canDoRequest() {
        return __awaiter(this, void 0, void 0, function* () {
            return true;
        });
    }
    getUserId() {
        return __awaiter(this, void 0, void 0, function* () {
            let currentUserId = yield this.$userSettingsService.getSettingValue("USER_ID");
            if (!currentUserId) {
                currentUserId = helpers_1.createGUID(false);
                this.$logger.trace(`Setting new USER_ID: ${currentUserId}.`);
                yield this.$userSettingsService.saveSetting("USER_ID", currentUserId);
            }
            return currentUserId;
        });
    }
    getClientName() {
        return "" + this.$staticConfig.CLIENT_NAME_ALIAS.cyan.bold;
    }
    getPrivacyPolicyLink() {
        return "http://www.telerik.com/company/privacy-policy";
    }
    getUserSessionsCount(projectName) {
        return __awaiter(this, void 0, void 0, function* () {
            let oldSessionCount = yield this.$userSettingsService.getSettingValue(AnalyticsSettingsService.SESSIONS_STARTED_OBSOLETE_KEY);
            if (oldSessionCount) {
                yield this.$userSettingsService.removeSetting(AnalyticsSettingsService.SESSIONS_STARTED_OBSOLETE_KEY);
            }
            return (yield this.$userSettingsService.getSettingValue(this.getSessionsProjectKey(projectName))) || oldSessionCount || 0;
        });
    }
    setUserSessionsCount(count, projectName) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.$userSettingsService.saveSetting(this.getSessionsProjectKey(projectName), count);
        });
    }
    getSessionsProjectKey(projectName) {
        return `${AnalyticsSettingsService.SESSIONS_STARTED_KEY_PREFIX}${projectName}`;
    }
}
AnalyticsSettingsService.SESSIONS_STARTED_OBSOLETE_KEY = "SESSIONS_STARTED";
AnalyticsSettingsService.SESSIONS_STARTED_KEY_PREFIX = "SESSIONS_STARTED_";
$injector.register("analyticsSettingsService", AnalyticsSettingsService);
