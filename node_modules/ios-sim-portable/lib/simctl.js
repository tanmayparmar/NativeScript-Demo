"use strict";
const childProcess = require("./child-process");
const errors = require("./errors");
const options = require("./options");
const _ = require("lodash");
class Simctl {
    launch(deviceId, appIdentifier) {
        let args = [];
        if (options.waitForDebugger) {
            args.push("-w");
        }
        args = args.concat([deviceId, appIdentifier]);
        if (options.args) {
            let applicationArgs = options.args.trim().split(/\s+/);
            _.each(applicationArgs, (arg) => args.push(arg));
        }
        let result = this.simctlExec("launch", args);
        if (options.waitForDebugger) {
            console.log(`${appIdentifier}: ${result}`);
        }
        return result;
    }
    terminate(deviceId, appIdentifier) {
        return this.simctlExec("terminate", [deviceId, appIdentifier]);
    }
    install(deviceId, applicationPath) {
        return this.simctlExec("install", [deviceId, applicationPath]);
    }
    uninstall(deviceId, appIdentifier, opts) {
        return this.simctlExec("uninstall", [deviceId, appIdentifier], opts);
    }
    notifyPost(deviceId, notification) {
        return this.simctlExec("notify_post", [deviceId, notification]);
    }
    getAppContainer(deviceId, appIdentifier) {
        try {
            return this.simctlExec("get_app_container", [deviceId, appIdentifier]);
        }
        catch (e) {
            if (e.message.indexOf("No such file or directory") > -1) {
                return null;
            }
            throw e;
        }
    }
    getDevices() {
        let rawDevices = this.simctlExec("list", ["devices"]);
        let deviceSectionRegex = /-- (iOS) (.+) --(\n    .+)*/mg;
        let match = deviceSectionRegex.exec(rawDevices);
        let matches = [];
        while (match !== null) {
            matches.push(match);
            match = deviceSectionRegex.exec(rawDevices);
        }
        if (matches.length < 1) {
            errors.fail('Could not find device section. ' + match);
        }
        let devices = [];
        for (match of matches) {
            let sdk = match[2];
            for (let line of match[0].split('\n').slice(1)) {
                let lineRegex = /^\s+(.*?)\s+\(([0-9A-F]{8}(?:-[0-9A-F]{4}){3}-[0-9A-F]{12})\)\s+\((.*?)\)(\s+\((?:.*?)\))?/;
                let lineMatch = lineRegex.exec(line);
                if (lineMatch === null) {
                    errors.fail('Could not match line. ' + line);
                }
                let available = lineMatch[4];
                if (available === null || available === undefined) {
                    devices.push({
                        name: lineMatch[1],
                        id: lineMatch[2],
                        fullId: "com.apple.CoreSimulator.SimDeviceType." + lineMatch[1],
                        runtimeVersion: sdk,
                        state: lineMatch[3]
                    });
                }
            }
        }
        return devices;
    }
    simctlExec(command, args, opts) {
        let result = childProcess.spawnSync("xcrun", ["simctl", command].concat(args), opts);
        if (result && result.stdout) {
            return result.stdout.toString().trim();
        }
        return '';
    }
}
exports.Simctl = Simctl;
