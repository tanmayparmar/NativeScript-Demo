"use strict";
const _ = require("lodash");
function getSimulator() {
    let libraryPath = require("./iphone-simulator");
    let obj = new libraryPath.iPhoneSimulator();
    return obj.createSimulator();
}
const publicApi = {};
Object.defineProperty(publicApi, "getRunningSimulator", {
    get: () => {
        return (...args) => {
            let isResolved = false;
            return new Promise((resolve, reject) => {
                let libraryPath = require("./iphone-simulator-xcode-simctl");
                let simulator = new libraryPath.XCodeSimctlSimulator();
                let repeatCount = 30;
                let timer = setInterval(() => {
                    let result = simulator.getBootedDevice.apply(simulator, args);
                    if ((result || !repeatCount) && !isResolved) {
                        isResolved = true;
                        clearInterval(timer);
                        resolve(result);
                    }
                    repeatCount--;
                }, 500);
            });
        };
    }
});
Object.defineProperty(publicApi, "getApplicationPath", {
    get: () => {
        return (...args) => {
            let simulator = getSimulator();
            let result = simulator.getApplicationPath.apply(simulator, args);
            return result;
        };
    }
});
Object.defineProperty(publicApi, "getInstalledApplications", {
    get: () => {
        return (...args) => {
            let simulator = getSimulator();
            let installedApplications = simulator.getInstalledApplications.apply(simulator, args);
            let result = _.map(installedApplications, application => application.appIdentifier);
            return result;
        };
    }
});
["installApplication",
    "uninstallApplication",
    "startApplication",
    "stopApplication",
    "printDeviceLog",
    "getDeviceLogProcess",
    "startSimulator",
    "getSimulatorName"].forEach(methodName => {
    Object.defineProperty(publicApi, methodName, {
        get: () => {
            return (...args) => {
                let simulator = getSimulator();
                return simulator[methodName].apply(simulator, args);
            };
        }
    });
});
module.exports = publicApi;
