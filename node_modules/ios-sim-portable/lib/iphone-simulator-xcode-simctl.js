"use strict";
const childProcess = require("./child-process");
const errors = require("./errors");
const common = require("./iphone-simulator-common");
const options = require("./options");
const simctl_1 = require("./simctl");
const utils = require("./utils");
const xcode = require("./xcode");
const _ = require("lodash");
const iphone_simulator_name_getter_1 = require("./iphone-simulator-name-getter");
class XCodeSimctlSimulator extends iphone_simulator_name_getter_1.IPhoneSimulatorNameGetter {
    constructor() {
        super();
        this.defaultDeviceIdentifier = "iPhone 6";
        this.simctl = null;
        this.simctl = new simctl_1.Simctl();
    }
    getDevices() {
        return this.simctl.getDevices();
    }
    getSdks() {
        let devices = this.simctl.getDevices();
        return _.map(devices, device => {
            return {
                displayName: `iOS ${device.runtimeVersion}`,
                version: device.runtimeVersion
            };
        });
    }
    run(applicationPath, applicationIdentifier) {
        let device = this.getDeviceToRun();
        let currentBootedDevice = _.find(this.getDevices(), device => this.isDeviceBooted(device));
        if (currentBootedDevice && (currentBootedDevice.name.toLowerCase() !== device.name.toLowerCase() || currentBootedDevice.runtimeVersion !== device.runtimeVersion)) {
            this.killSimulator();
        }
        this.startSimulator(device);
        if (!options.skipInstall) {
            this.simctl.install(device.id, applicationPath);
        }
        let launchResult = this.simctl.launch(device.id, applicationIdentifier);
        if (options.logging) {
            this.printDeviceLog(device.id, launchResult);
        }
    }
    sendNotification(notification) {
        let device = this.getBootedDevice();
        if (!device) {
            errors.fail("Could not find device.");
        }
        this.simctl.notifyPost("booted", notification);
    }
    getApplicationPath(deviceId, applicationIdentifier) {
        return this.simctl.getAppContainer(deviceId, applicationIdentifier);
    }
    getInstalledApplications(deviceId) {
        return common.getInstalledApplications(deviceId);
    }
    installApplication(deviceId, applicationPath) {
        return this.simctl.install(deviceId, applicationPath);
    }
    uninstallApplication(deviceId, appIdentifier) {
        return this.simctl.uninstall(deviceId, appIdentifier, { skipError: true });
    }
    startApplication(deviceId, appIdentifier) {
        return this.simctl.launch(deviceId, appIdentifier);
    }
    stopApplication(deviceId, appIdentifier, bundleExecutable) {
        try {
            let xcodeMajorVersion = null;
            try {
                const xcodeVersion = xcode.getXcodeVersionData();
                xcodeMajorVersion = +xcodeVersion.major;
            }
            catch (err) {
            }
            if (xcodeMajorVersion && xcodeMajorVersion < 8) {
                const resultOfKill = childProcess.execSync(`killall ${bundleExecutable}`, { skipError: true });
                utils.sleep(0.5);
                return resultOfKill;
            }
            else {
                return this.simctl.terminate(deviceId, appIdentifier);
            }
        }
        catch (e) {
        }
    }
    printDeviceLog(deviceId, launchResult) {
        return common.printDeviceLog(deviceId, launchResult);
    }
    getDeviceLogProcess(deviceId) {
        return common.getDeviceLogProcess(deviceId);
    }
    getDeviceToRun() {
        let devices = this.simctl.getDevices(), sdkVersion = options.sdkVersion || options.sdk;
        let result = _.find(devices, (device) => {
            if (sdkVersion && !options.device) {
                return device.runtimeVersion === sdkVersion;
            }
            if (options.device && !sdkVersion) {
                return device.name === options.device;
            }
            if (options.device && sdkVersion) {
                return device.runtimeVersion === sdkVersion && device.name === options.device;
            }
            if (!sdkVersion && !options.device) {
                return this.isDeviceBooted(device);
            }
        });
        if (!result) {
            result = _.find(devices, (device) => device.name === this.defaultDeviceIdentifier);
        }
        if (!result) {
            let sortedDevices = _.sortBy(devices, (device) => device.runtimeVersion);
            result = _.last(sortedDevices);
        }
        return result;
    }
    isDeviceBooted(device) {
        return device.state === 'Booted';
    }
    getBootedDevice() {
        let devices = this.simctl.getDevices();
        return _.find(devices, device => this.isDeviceBooted(device));
    }
    startSimulator(device) {
        device = device || this.getDeviceToRun();
        if (!this.isDeviceBooted(device)) {
            let bootedDevice = this.getBootedDevice();
            if (bootedDevice && bootedDevice.id !== device.id) {
                this.killSimulator();
            }
            common.startSimulator(device.id);
            utils.sleep(1);
        }
    }
    killSimulator() {
        childProcess.execSync("pkill -9 -f Simulator");
    }
}
XCodeSimctlSimulator.DEVICE_IDENTIFIER_PREFIX = "com.apple.CoreSimulator.SimDeviceType";
exports.XCodeSimctlSimulator = XCodeSimctlSimulator;
