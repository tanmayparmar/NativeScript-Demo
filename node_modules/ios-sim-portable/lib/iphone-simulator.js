"use strict";
const fs = require("fs");
const os = require("os");
const errors = require("./errors");
const options = require("./options");
const iphone_simulator_xcode_simctl_1 = require("./iphone-simulator-xcode-simctl");
const _ = require("lodash");
class iPhoneSimulator {
    constructor() {
        this.simulator = null;
        this.simulator = this.createSimulator();
    }
    run(applicationPath, applicationIdentifier) {
        if (!fs.existsSync(applicationPath)) {
            errors.fail("Path does not exist ", applicationPath);
        }
        if (options.device) {
            let deviceNames = _.unique(_.map(this.simulator.getDevices(), (device) => device.name));
            if (!_.contains(deviceNames, options.device)) {
                errors.fail(`Unable to find device ${options.device}. The valid device names are ${deviceNames.join(", ")}`);
            }
        }
        let sdkVersion = options.sdkVersion || options.sdk;
        if (sdkVersion) {
            let runtimeVersions = _.unique(_.map(this.simulator.getDevices(), (device) => device.runtimeVersion));
            if (!_.contains(runtimeVersions, sdkVersion)) {
                errors.fail(`Unable to find sdk ${sdkVersion}. The valid runtime versions are ${runtimeVersions.join(", ")}`);
            }
        }
        return this.simulator.run(applicationPath, applicationIdentifier);
    }
    printDeviceTypes() {
        let devices = this.simulator.getDevices();
        _.each(devices, device => console.log(`Device Identifier: ${device.fullId}. ${os.EOL}Runtime version: ${device.runtimeVersion} ${os.EOL}`));
    }
    printSDKS() {
        let sdks = this.simulator.getSdks();
        _.each(sdks, (sdk) => {
            let output = `    Display Name: ${sdk.displayName} ${os.EOL}    Version: ${sdk.version} ${os.EOL}`;
            if (sdk.rootPath) {
                output += `    Root path: ${sdk.rootPath} ${os.EOL}`;
            }
            console.log(output);
        });
    }
    sendNotification(notification) {
        if (!notification) {
            errors.fail("Notification required.");
        }
        return this.simulator.sendNotification(notification);
    }
    createSimulator() {
        return new iphone_simulator_xcode_simctl_1.XCodeSimctlSimulator();
    }
}
exports.iPhoneSimulator = iPhoneSimulator;
